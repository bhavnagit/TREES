class Solution {
    public int maxDepth(TreeNode root) {
    if(root == null) {
        return 0;
    }
    LinkedList<TreeNode> queue = new LinkedList<>();
    queue.addLast(root);
    int count = 0;
    while(!queue.isEmpty()) {
        int size = queue.size();
        while(size-- > 0) {
            TreeNode node = queue.removeFirst();
            if(node.left != null) {
                queue.addLast(node.left);
            }
            if(node.right != null) {
                queue.addLast(node.right);
            }
        }
        count++;
    }
    return count;
}
}
    //ITERATIVE SOLUTION
    TIME AND SOACE COMPLEXITY - O(N)
    
    //RECURSION SOLUTION
    
    class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
 }
